AS = RegisterMod("Advanced Statistics",1)
local game = Game()

AS.Languages = {"en", "en_detailed", "fr"}
AS.text = {} -- Table that holds all translation strings

local RoomConfig = {}
local RoomList = {}
local json = require("json")

require("as_config")
AS.CONFIG = AS.DEFAULT_CONFIG

require("as_mod_config_menu")


--languages
for _,lang in ipairs(AS.Languages) do
	require("as_lang."..lang)
end

-- hud functions
require("as_utils.hud")

-- TODO : Brimstone compatibility

AS.ACCURACY ={
	TOTAL_TEARS = 0,
	HIT_TEARS = 0
}

AS.HIT_STATS ={
	MAX_KILLS_NOHIT = 0,
	AVG_MAX_KILLS_NOHIT = 0,
	WEIGHT_MAX_KILLS_NOHIT = 0,
	
	MOB_KILLED = 0,
	MOB_KILLED_PER_LEVEL = 0,
	AVG_MOB_KILLED_PER_LEVEL = 0,
	WEIGHT_MOB_KILLED_PER_LEVEL = 0,
	
	ENTITIES_KILLED = 0,
	MOB_KILLED_NOHIT = 0,
	BAD_HITS_TAKEN = 0,
	
	BAD_HITS_TAKEN_PER_LEVEL = 0,
	AVG_BAD_HITS_TAKEN_PER_LEVEL = 0,
	WEIGHT_BAD_HITS_TAKEN_PER_LEVEL = 0,
	
	HITS_TAKEN = 0
}

AS.LEVEL = {
	NB_CLEARED_LEVELS = 0,
	NB_CLEARED_ROOMS = 0,
	ROOM_CLEARED_NOHIT = 0,
	
	MAX_ROOM_CLEARED_NOHIT = 0,
	AVG_MAX_ROOM_CLEARED_NOHIT = 0,
	WEIGHT_MAX_ROOM_CLEARED_NOHIT = 0
}

AS.GLOBAL = {
	NB_FRAMES = 0,
	NB_FRAMES_NOHIT = 0,
	MAX_FRAMES_NOHIT = 0,
	AVG_MAX_FRAMES_NOHIT = 0,
	WEIGHT_MAX_FRAMES_NOHIT = 0
	
	
}



local Font10 = Font()
Font10:Load("font/teammeatfont10.fnt")

local Font12 = Font()
Font12:Load("font/teammeatfont12.fnt")

local Font16Bold = Font()
Font16Bold:Load("font/teammeatfont16bold.fnt")




function AS:onPlayerInit(player)
	local room = game:GetLevel():GetCurrentRoom()
	RoomConfig = {}
	for i = 1, room:GetGridSize() do
		local Grid = room:GetGridEntity(i)
		if Grid == nil then
			RoomConfig[i] = nil
		else
			RoomConfig[i] = {Type = Grid.Desc.Type, Variant = Grid.Desc.Variant, State = Grid.Desc.State}
		end
	end
	
	
	
	
		
	local content = json.decode(AS:LoadData())

	AS.ACCURACY = content.ACCURACY
	AS.HIT_STATS = content.HIT_STATS
	AS.LEVEL = content.LEVEL
	AS.GLOBAL = content.GLOBAL
	
	
	-- ACCURACY
	
	if AS.ACCURACY == nil then AS.ACCURACY = {} end
	if AS.ACCURACY.TOTAL_TEARS == nil then AS.ACCURACY.TOTAL_TEARS = 0 end
	if AS.ACCURACY.HIT_TEARS == nil then AS.ACCURACY.HIT_TEARS = 0 end
	
	-- HIT STATS
	
	if AS.HIT_STATS == nil then AS.HIT_STATS = {} end
	-- Max kill nohit
	if AS.HIT_STATS.MAX_KILLS_NOHIT == nil then AS.HIT_STATS.MAX_KILLS_NOHIT = 0 end
	if AS.HIT_STATS.AVG_MAX_KILLS_NOHIT == nil then AS.HIT_STATS.AVG_MAX_KILLS_NOHIT = 0 end
	if AS.HIT_STATS.WEIGHT_MAX_KILLS_NOHIT == nil then AS.HIT_STATS.WEIGHT_MAX_KILLS_NOHIT = 0 end
	
	if AS.HIT_STATS.MOB_KILLED == nil then AS.HIT_STATS.MOB_KILLED = 0 end
	-- Mob killed per level
	if AS.HIT_STATS.MOB_KILLED_PER_LEVEL == nil then AS.HIT_STATS.MOB_KILLED_PER_LEVEL = 0 end
	if AS.HIT_STATS.AVG_MOB_KILLED_PER_LEVEL == nil then AS.HIT_STATS.AVG_MOB_KILLED_PER_LEVEL = 0 end
	if AS.HIT_STATS.WEIGHT_MOB_KILLED_PER_LEVEL == nil then AS.HIT_STATS.WEIGHT_MOB_KILLED_PER_LEVEL = 0 end
	
	if AS.HIT_STATS.ENTITIES_KILLED == nil then AS.HIT_STATS.ENTITIES_KILLED = 0 end
	if AS.HIT_STATS.MOB_KILLED_NOHIT == nil then AS.HIT_STATS.MOB_KILLED_NOHIT = 0 end
	if AS.HIT_STATS.BAD_HITS_TAKEN == nil then AS.HIT_STATS.BAD_HITS_TAKEN = 0 end
	-- Bad hits taken per level 
	if AS.HIT_STATS.BAD_HITS_TAKEN_PER_LEVEL == nil then AS.HIT_STATS.BAD_HITS_TAKEN_PER_LEVEL = 0 end
	if AS.HIT_STATS.AVG_BAD_HITS_TAKEN_PER_LEVEL == nil then AS.HIT_STATS.AVG_BAD_HITS_TAKEN_PER_LEVEL = 0 end
	if AS.HIT_STATS.WEIGHT_BAD_HITS_TAKEN_PER_LEVEL == nil then AS.HIT_STATS.WEIGHT_BAD_HITS_TAKEN_PER_LEVEL = 0 end
	
	if AS.HIT_STATS.HITS_TAKEN == nil then AS.HIT_STATS.HITS_TAKEN = 0 end
	
	-- LEVEL
	
	if AS.LEVEL == nil then AS.LEVEL = {} end
	if AS.LEVEL.NB_CLEARED_LEVELS == nil then  AS.LEVEL.NB_CLEARED_LEVELS = 0 end
	if AS.LEVEL.NB_CLEARED_ROOMS == nil then  AS.LEVEL.NB_CLEARED_ROOMS = 0 end
	if AS.LEVEL.ROOM_CLEARED_NOHIT == nil then  AS.LEVEL.ROOM_CLEARED_NOHIT = 0 end
	-- Max room nohit
	if AS.LEVEL.MAX_ROOM_CLEARED_NOHIT == nil then  AS.LEVEL.MAX_ROOM_CLEARED_NOHIT = 0 end
	if AS.LEVEL.AVG_MAX_ROOM_CLEARED_NOHIT == nil then  AS.LEVEL.AVG_MAX_ROOM_CLEARED_NOHIT = 0 end
	if AS.LEVEL.WEIGHT_MAX_ROOM_CLEARED_NOHIT == nil then  AS.LEVEL.WEIGHT_MAX_ROOM_CLEARED_NOHIT = 0 end
	
	-- GLOBAL
	
	if AS.GLOBAL == nil then AS.GLOBAL = {} end
	if AS.GLOBAL.NB_FRAMES == nil then  AS.GLOBAL.NB_FRAMES = 0 end
	if AS.GLOBAL.NB_FRAMES_NOHIT == nil then  AS.GLOBAL.NB_FRAMES_NOHIT = 0 end
	-- Max frames nohit
	if AS.GLOBAL.MAX_FRAMES_NOHIT == nil then  AS.GLOBAL.MAX_FRAMES_NOHIT = 0 end
	if AS.GLOBAL.AVG_MAX_FRAMES_NOHIT == nil then  AS.GLOBAL.AVG_MAX_FRAMES_NOHIT = 0 end
	if AS.GLOBAL.WEIGHT_MAX_FRAMES_NOHIT == nil then  AS.GLOBAL.WEIGHT_MAX_FRAMES_NOHIT = 0 end
		
	
	if AS.MCMLoaded then 
		AS.CONFIG = content.CONFIG
		if AS.CONFIG == nil then AS.CONFIG = AS.DEFAULT_CONFIG end
		
		
		if AS.CONFIG.ADDITIONAL_INFO == nil then AS.CONFIG.ADDITIONAL_INFO = AS.DEFAULT_CONFIG.ADDITIONAL_INFO end
		if AS.CONFIG.TEXT_SIZE == nil then AS.CONFIG.TEXT_SIZE = AS.DEFAULT_CONFIG.TEXT_SIZE end
		
		-- Load config of additional print of stats on the base HUD if it wasn't saved
		if AS.CONFIG.ADDITIONAL_ACCURACY == nil then AS.CONFIG.ADDITIONAL_ACCURACY = AS.DEFAULT_CONFIG.ADDITIONAL_ACCURACY end
		if AS.CONFIG.ADDITIONAL_LEVEL_COMPLETION == nil then AS.CONFIG.ADDITIONAL_LEVEL_COMPLETION  = AS.DEFAULT_CONFIG.ADDITIONAL_LEVEL_COMPLETION end
		if AS.CONFIG.ADDITIONAL_KILLSTREAK == nil then AS.CONFIG.ADDITIONAL_KILLSTREAK = AS.DEFAULT_CONFIG.ADDITIONAL_KILLSTREAK end
		if AS.CONFIG.ADDITIONAL_ROOMSTREAK == nil then AS.CONFIG.ADDITIONAL_ROOMSTREAK = AS.DEFAULT_CONFIG.ADDITIONAL_ROOMSTREAK end
		if AS.CONFIG.ADDITIONAL_TIMESTREAK == nil then AS.CONFIG.ADDITIONAL_TIMESTREAK = AS.DEFAULT_CONFIG.ADDITIONAL_TIMESTREAK end
		if AS.CONFIG.ADDITIONAL_HITS_TAKEN == nil then AS.CONFIG.ADDITIONAL_HITS_TAKEN = AS.DEFAULT_CONFIG.ADDITIONAL_HITS_TAKEN end
		if AS.CONFIG.ADDITIONAL_ENNEMY_KILLED == nil then AS.CONFIG.ADDITIONAL_ENNEMY_KILLED  = AS.DEFAULT_CONFIG.ADDITIONAL_ENNEMY_KILLED end
		
		-- Load config of additional print of stats on timer if it wasn't saved
		if AS.CONFIG.ADDITIONAL_ACCURACY_ONTIMER == nil then AS.CONFIG.ADDITIONAL_ACCURACY  = AS.DEFAULT_CONFIG.ADDITIONAL_ACCURACY end
		if AS.CONFIG.ADDITIONAL_LEVEL_COMPLETION_ONTIMER == nil then AS.CONFIG.ADDITIONAL_LEVEL_COMPLETION_ONTIMER  = AS.DEFAULT_CONFIG.ADDITIONAL_LEVEL_COMPLETION_ONTIMER end
		if AS.CONFIG.ADDITIONAL_KILLSTREAK_ONTIMER == nil then AS.CONFIG.ADDITIONAL_KILLSTREAK_ONTIMER  = AS.DEFAULT_CONFIG.ADDITIONAL_KILLSTREAK_ONTIMER end
		if AS.CONFIG.ADDITIONAL_ROOMSTREAK_ONTIMER == nil then AS.CONFIG.ADDITIONAL_ROOMSTREAK_ONTIMER  = AS.DEFAULT_CONFIG.ADDITIONAL_ROOMSTREAK_ONTIMER end
		if AS.CONFIG.ADDITIONAL_TIMESTREAK_ONTIMER == nil then AS.CONFIG.ADDITIONAL_TIMESTREAK_ONTIMER  = AS.DEFAULT_CONFIG.ADDITIONAL_TIMESTREAK_ONTIMER end
		if AS.CONFIG.ADDITIONAL_HITS_TAKEN_ONTIMER == nil then AS.CONFIG.ADDITIONAL_HITS_TAKEN_ONTIMER  = AS.DEFAULT_CONFIG.ADDITIONAL_HITS_TAKEN_ONTIMER end
		if AS.CONFIG.ADDITIONAL_ENNEMY_KILLED_ONTIMER == nil then AS.CONFIG.ADDITIONAL_ENNEMY_KILLED_ONTIMER  = AS.DEFAULT_CONFIG.ADDITIONAL_ENNEMY_KILLED_ONTIMER end
		
		if AS.CONFIG.LANG == nil then AS.CONFIG = AS.DEFAULT_CONFIG.LANG end
		
		-- Load config of stats toggled on the base HUD if it wasn't saved
		if AS.CONFIG.TOGGLE_ACCURACY == nil then AS.CONFIG.TOGGLE_ACCURACY  = AS.DEFAULT_CONFIG.TOGGLE_ACCURACY end
		if AS.CONFIG.TOGGLE_LEVEL_COMPLETION == nil then AS.CONFIG.TOGGLE_LEVEL_COMPLETION  = AS.DEFAULT_CONFIG.TOGGLE_LEVEL_COMPLETION end
		if AS.CONFIG.TOGGLE_KILLSTREAK == nil then AS.CONFIG.TOGGLE_KILLSTREAK  = AS.DEFAULT_CONFIG.TOGGLE_KILLSTREAK end
		if AS.CONFIG.TOGGLE_ROOMSTREAK == nil then AS.CONFIG.TOGGLE_ROOMSTREAK  = AS.DEFAULT_CONFIG.TOGGLE_ROOMSTREAK end
		if AS.CONFIG.TOGGLE_TIMESTREAK == nil then AS.CONFIG.TOGGLE_TIMESTREAK  = AS.DEFAULT_CONFIG.TOGGLE_TIMESTREAK end
		if AS.CONFIG.TOGGLE_HITS_TAKEN == nil then AS.CONFIG.TOGGLE_HITS_TAKEN  = AS.DEFAULT_CONFIG.TOGGLE_HITS_TAKEN end
		if AS.CONFIG.TOGGLE_ENNEMY_KILLED == nil then AS.CONFIG.TOGGLE_ENNEMY_KILLED  = AS.DEFAULT_CONFIG.TOGGLE_ENNEMY_KILLED end
		
		-- Load config of stats toggled on timer if it wasn't saved
		if AS.CONFIG.TOGGLE_ACCURACY_ONTIMER == nil then AS.CONFIG.TOGGLE_ACCURACY_ONTIMER  = AS.DEFAULT_CONFIG.TOGGLE_ACCURACY_ONTIMER end
		if AS.CONFIG.TOGGLE_LEVEL_COMPLETION_ONTIMER == nil then AS.CONFIG.TOGGLE_LEVEL_COMPLETION_ONTIMER = AS.DEFAULT_CONFIG.TOGGLE_LEVEL_COMPLETION_ONTIMER end
		if AS.CONFIG.TOGGLE_KILLSTREAK_ONTIMER == nil then AS.CONFIG.TOGGLE_KILLSTREAK_ONTIMER  = AS.DEFAULT_CONFIG.TOGGLE_KILLSTREAK_ONTIMER end
		if AS.CONFIG.TOGGLE_ROOMSTREAK_ONTIMER == nil then AS.CONFIG.TOGGLE_ROOMSTREAK_ONTIMER  = AS.DEFAULT_CONFIG.TOGGLE_ROOMSTREAK_ONTIMER end
		if AS.CONFIG.TOGGLE_TIMESTREAK_ONTIMER == nil then AS.CONFIG.TOGGLE_TIMESTREAK_ONTIMER  = AS.DEFAULT_CONFIG.TOGGLE_TIMESTREAK_ONTIMER end
		if AS.CONFIG.TOGGLE_HITS_TAKEN_ONTIMER == nil then AS.CONFIG.TOGGLE_HITS_TAKEN_ONTIMER  = AS.DEFAULT_CONFIG.TOGGLE_HITS_TAKEN_ONTIMER end
		if AS.CONFIG.TOGGLE_ENNEMY_KILLED_ONTIMER == nil then AS.CONFIG.TOGGLE_ENNEMY_KILLED_ONTIMER  = AS.DEFAULT_CONFIG.TOGGLE_ENNEMY_KILLED_ONTIMER end
	end	
		
		
		
	if game:GetFrameCount() == 0 then
		AS.ACCURACY.TOTAL_TEARS = 0
		AS.ACCURACY.HIT_TEARS = 0
		
		AS.HIT_STATS.MAX_KILLS_NOHIT = 0
		AS.HIT_STATS.MOB_KILLED = 0
		AS.HIT_STATS.ENTITIES_KILLED = 0
		AS.HIT_STATS.MOB_KILLED_NOHIT = 0
		AS.HIT_STATS.BAD_HITS_TAKEN = 0
		AS.HIT_STATS.HITS_TAKEN = 0
		
		AS.LEVEL.NB_CLEARED_LEVELS = 0
		AS.LEVEL.NB_CLEARED_ROOMS = 0
		AS.LEVEL.ROOM_CLEARED_NOHIT = 0
		AS.LEVEL.MAX_ROOM_CLEARED_NOHIT = 0
		
		AS.GLOBAL.MAX_FRAMES = 0
		AS.GLOBAL.MAX_FRAMES_NOHIT = 0
		AS.GLOBAL.NB_FRAMES_NOHIT = 0
	end
	
	-- Resets the HUD
	AS.HUD.alpha = 1.0
	AS.HUD.nb_of_tab_frames = 0
	AS.HUD.timer_shown = false
end

AS:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, AS.onPlayerInit)

local function saveGame()
	local content = {
		ACCURACY = AS.ACCURACY,
		HIT_STATS = AS.HIT_STATS,
		LEVEL = AS.LEVEL,
		GLOBAL = AS.GLOBAL,
		
	}
	
	if AS.MCMLoaded then 
		content.CONFIG = AS.CONFIG
	end
	
	AS:SaveData(json.encode(content))
end




function AS:onGameExit(shouldSave)

	if not shouldSave then -- end of a run so we actually save the stats x)
		local run_weight = (AS.LEVEL.NB_CLEARED_LEVELS - 1)  + AS.LEVEL.NB_CLEARED_ROOMS / game:GetLevel():GetRoomCount() -- The weight of the run in the average stats
		-- Isaac.ConsoleOutput(AS.LEVEL.NB_CLEARED_LEVELS .." PD " ..run_weight .. "\n")
		
		-- Update max kills no hit
		local total_avg =  AS.HIT_STATS.WEIGHT_MAX_KILLS_NOHIT * AS.HIT_STATS.AVG_MAX_KILLS_NOHIT + run_weight * AS.HIT_STATS.MAX_KILLS_NOHIT
		AS.HIT_STATS.WEIGHT_MAX_KILLS_NOHIT = AS.HIT_STATS.WEIGHT_MAX_KILLS_NOHIT + run_weight
		AS.HIT_STATS.AVG_MAX_KILLS_NOHIT = total_avg / AS.HIT_STATS.WEIGHT_MAX_KILLS_NOHIT
		
		-- Update max room no hit
		total_avg =  AS.LEVEL.WEIGHT_MAX_ROOM_CLEARED_NOHIT * AS.LEVEL.AVG_MAX_ROOM_CLEARED_NOHIT + run_weight * AS.LEVEL.MAX_ROOM_CLEARED_NOHIT
		AS.LEVEL.WEIGHT_MAX_ROOM_CLEARED_NOHIT = AS.LEVEL.WEIGHT_MAX_ROOM_CLEARED_NOHIT + run_weight
		AS.LEVEL.AVG_MAX_ROOM_CLEARED_NOHIT = total_avg / AS.LEVEL.WEIGHT_MAX_ROOM_CLEARED_NOHIT
		
		-- Update frames no hit
		total_avg =  AS.GLOBAL.WEIGHT_MAX_FRAMES_NOHIT * AS.GLOBAL.AVG_MAX_FRAMES_NOHIT + run_weight * AS.GLOBAL.MAX_FRAMES_NOHIT
		AS.GLOBAL.WEIGHT_MAX_FRAMES_NOHIT = AS.GLOBAL.WEIGHT_MAX_FRAMES_NOHIT + run_weight
		AS.GLOBAL.AVG_MAX_FRAMES_NOHIT = total_avg / AS.GLOBAL.WEIGHT_MAX_FRAMES_NOHIT
		
		-- Update bad hits taken per level
		total_avg =  AS.HIT_STATS.WEIGHT_BAD_HITS_TAKEN_PER_LEVEL * AS.HIT_STATS.AVG_BAD_HITS_TAKEN_PER_LEVEL + run_weight * AS.HIT_STATS.BAD_HITS_TAKEN_PER_LEVEL
		AS.HIT_STATS.WEIGHT_BAD_HITS_TAKEN_PER_LEVEL = AS.HIT_STATS.WEIGHT_BAD_HITS_TAKEN_PER_LEVEL + run_weight
		AS.HIT_STATS.AVG_BAD_HITS_TAKEN_PER_LEVEL = total_avg / AS.HIT_STATS.WEIGHT_BAD_HITS_TAKEN_PER_LEVEL
		
		-- Update mob killed per level
		total_avg =  AS.HIT_STATS.WEIGHT_MOB_KILLED_PER_LEVEL * AS.HIT_STATS.AVG_MOB_KILLED_PER_LEVEL + run_weight * AS.HIT_STATS.MOB_KILLED_PER_LEVEL
		AS.HIT_STATS.WEIGHT_MOB_KILLED_PER_LEVEL = AS.HIT_STATS.WEIGHT_MOB_KILLED_PER_LEVEL + run_weight
		AS.HIT_STATS.AVG_MOB_KILLED_PER_LEVEL = total_avg / AS.HIT_STATS.WEIGHT_MOB_KILLED_PER_LEVEL
		
		
	end


	saveGame()
end

AS:AddCallback(ModCallbacks.MC_PRE_GAME_EXIT, AS.onGameExit)




 

function AS:onGameOver(mort_lol)
	-- AS.ACCURACY.TOTAL_TEARS = 0
	-- AS.ACCURACY.HIT_TEARS = 0
	
	-- AS.HIT_STATS.MAX_KILLS_NOHIT = 0
	-- AS.HIT_STATS.MOB_KILLED = 0
	-- AS.HIT_STATS.MOB_KILLED_PER_LEVEL = 0
	-- AS.HIT_STATS.ENTITIES_KILLED = 0
	-- AS.HIT_STATS.MOB_KILLED_NOHIT = 0
	-- AS.HIT_STATS.BAD_HITS_TAKEN = 0
	-- AS.HIT_STATS.BAD_HITS_TAKEN_PER_LEVEL = 0
	-- AS.HIT_STATS.HITS_TAKEN = 0
	
	-- AS.LEVEL.NB_CLEARED_LEVELS = 0
	-- AS.LEVEL.NB_CLEARED_ROOMS = 0
	-- AS.LEVEL.ROOM_CLEARED_NOHIT = 0
	-- AS.LEVEL.MAX_ROOM_CLEARED_NOHIT = 0
	
	-- AS.GLOBAL.NB_FRAMES = 0
	-- AS.GLOBAL.MAX_FRAMES_NOHIT = 0
	-- AS.GLOBAL.NB_FRAMES_NOHIT = 0
	
	saveGame()
end

AS:AddCallback(ModCallbacks.MC_POST_GAME_END, AS.onGameOver)


function AS:onNewRoom()
	-- Sets the roomConfig
	local room = game:GetLevel():GetCurrentRoom()
	RoomConfig = {}
	for i = 1, room:GetGridSize() do
		local Grid = room:GetGridEntity(i)
		if Grid == nil then
			RoomConfig[i] = nil
		else
			RoomConfig[i] = {Type = Grid.Desc.Type, Variant = Grid.Desc.Variant, State = Grid.Desc.State}
		end
	end
end

AS:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, AS.onNewRoom)



function AS:onNewLevel()
	AS.LEVEL.NB_CLEARED_ROOMS = 1
	AS.LEVEL.NB_CLEARED_LEVELS = AS.LEVEL.NB_CLEARED_LEVELS + 1
	AS.HIT_STATS.MOB_KILLED_PER_LEVEL = AS.HIT_STATS.MOB_KILLED / AS.LEVEL.NB_CLEARED_LEVELS
	AS.HIT_STATS.BAD_HITS_TAKEN_PER_LEVEL = AS.HIT_STATS.BAD_HITS_TAKEN / AS.LEVEL.NB_CLEARED_LEVELS
	-- Isaac.ConsoleOutput("Stage : " .. game:GetLevel():GetStage() .. "\n")
end

AS:AddCallback(ModCallbacks.MC_POST_NEW_LEVEL, AS.onNewLevel)



function AS:onUpdate(player)
	local room = game:GetLevel():GetCurrentRoom()
	
	for _, entity in pairs(Isaac.GetRoomEntities()) do
		if entity.Type == EntityType.ENTITY_FIREPLACE and entity.HitPoints == 1.0 and not entity:GetData().Died then
			entity:GetData().Died = true
			AS.HIT_STATS.ENTITIES_KILLED = AS.HIT_STATS.ENTITIES_KILLED + 1
		end
	end 
	
	
	--Checks if the grid changed
	for i = 1, room:GetGridSize() do
		local Grid = room:GetGridEntity(i)
		if Grid and RoomConfig[i] and
			(Grid.Desc.Type ~= RoomConfig[i].Type or
			 Grid.Desc.Variant ~= RoomConfig[i].Variant or
			 Grid.Desc.State ~= RoomConfig[i].State )then
			-- Isaac.ConsoleOutput(RoomConfig[i].Type)
			if Grid.Desc.Type == GridEntityType.GRID_POOP or RoomConfig[i].Type == GridEntityType.GRID_TNT then
				AS.ACCURACY.HIT_TEARS = AS.ACCURACY.HIT_TEARS + 1
				
				-- Isaac.ConsoleOutput(Grid.Desc.State .."\n")
				if (Grid.Desc.Type == GridEntityType.GRID_POOP and Grid.Desc.State == 1000) or (RoomConfig[i].Type == GridEntityType.GRID_TNT and Grid.Desc.State == 4)  then
					AS.HIT_STATS.ENTITIES_KILLED = AS.HIT_STATS.ENTITIES_KILLED + 1
				end
			end
		end
		if Grid then
			RoomConfig[i] = {Type = Grid.Desc.Type, Variant = Grid.Desc.Variant, State = Grid.Desc.State}
		end
	end
	AS.GLOBAL.NB_FRAMES = AS.GLOBAL.NB_FRAMES + 1
	AS.GLOBAL.NB_FRAMES_NOHIT = AS.GLOBAL.NB_FRAMES_NOHIT + 1
end

AS:AddCallback(ModCallbacks.MC_POST_UPDATE, AS.onUpdate)




function AS:onTearCollision(Tear, Collider, low)
	if Tear.StickTarget == nil then
		AS.ACCURACY.HIT_TEARS = AS.ACCURACY.HIT_TEARS + 1
	end
end

AS:AddCallback(ModCallbacks.MC_PRE_TEAR_COLLISION, AS.onTearCollision)




function AS:onTearDeath(Tear)
	
	AS.ACCURACY.TOTAL_TEARS = AS.ACCURACY.TOTAL_TEARS + 1

end

AS:AddCallback(ModCallbacks.MC_POST_ENTITY_REMOVE , AS.onTearDeath, EntityType.ENTITY_TEAR)


function AS:onEnemyDeath(entity)
	if entity:IsEnemy() then
		if entity.Type == EntityType.ENTITY_MOVABLE_TNT then
			AS.HIT_STATS.ENTITIES_KILLED = AS.HIT_STATS.ENTITIES_KILLED + 1
		else
			AS.HIT_STATS.MOB_KILLED = AS.HIT_STATS.MOB_KILLED + 1
			AS.HIT_STATS.MOB_KILLED_PER_LEVEL = AS.HIT_STATS.MOB_KILLED / AS.LEVEL.NB_CLEARED_LEVELS
			AS.HIT_STATS.MOB_KILLED_NOHIT = AS.HIT_STATS.MOB_KILLED_NOHIT + 1
		end
	end

end

AS:AddCallback(ModCallbacks.MC_POST_ENTITY_KILL , AS.onEnemyDeath)

function AS:onPlayerTakeDamage(TookDamage, DamageAmount, DamageFlags, DamageSource, DamageCountdownFrames)

	AS.HIT_STATS.HITS_TAKEN= AS.HIT_STATS.HITS_TAKEN + 1
	-- Isaac.ConsoleOutput(DamageFlags)
	-- Isaac.ConsoleOutput(DamageFlags & (DamageFlag.DAMAGE_RED_HEARTS | DamageFlag.DAMAGE_NO_PENALTIES | DamageFlag.DAMAGE_CURSED_DOOR | DamageFlag.DAMAGE_IV_BAG | DamageFlag.DAMAGE_FAKE))
	if DamageFlags & (DamageFlag.DAMAGE_RED_HEARTS | DamageFlag.DAMAGE_NO_PENALTIES | DamageFlag.DAMAGE_CURSED_DOOR | DamageFlag.DAMAGE_IV_BAG | DamageFlag.DAMAGE_FAKE) == 0 then
		AS.HIT_STATS.BAD_HITS_TAKEN= AS.HIT_STATS.BAD_HITS_TAKEN + 1
		AS.HIT_STATS.BAD_HITS_TAKEN_PER_LEVEL = AS.HIT_STATS.BAD_HITS_TAKEN / AS.LEVEL.NB_CLEARED_LEVELS
		AS.HIT_STATS.MOB_KILLED_NOHIT = 0
		AS.LEVEL.ROOM_CLEARED_NOHIT = 0
		AS.GLOBAL.NB_FRAMES_NOHIT = 0
	end
	
end

AS:AddCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, AS.onPlayerTakeDamage, EntityType.ENTITY_PLAYER)



function AS:onNewRoom()
	if game:GetRoom():IsFirstVisit() then
		AS.LEVEL.NB_CLEARED_ROOMS = AS.LEVEL.NB_CLEARED_ROOMS + 1 
		AS.LEVEL.ROOM_CLEARED_NOHIT = AS.LEVEL.ROOM_CLEARED_NOHIT + 1
	end
end

AS:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, AS.onNewRoom)




-- Add HUD callbacks

AS:AddCallback(ModCallbacks.MC_INPUT_ACTION, AS.onHUDToggle)
AS:AddCallback(ModCallbacks.MC_POST_RENDER, AS.onRender)

return AS